@model StudentManagement.Web.ViewModels.StudentDashboardViewModel

@{
    ViewData["Title"] = "Student Dashboard";
    Layout = "~/Views/Shared/_StudentLayout.cshtml";

    int totalCourses = Model.Courses.Count;
    int completedCourses = Model.Courses.Count(c => c.Progress == 100);
    int totalMinutesWatched = Model.Courses.Sum(c => c.TotalWatchedMinutes);
    int totalHours = totalMinutesWatched / 60;
    int remainingMinutes = totalMinutesWatched % 60;
    string studentName = Model.StudentName?.Name ?? "Student";
}

<!-- 🎓 Header Section with Gradient Background -->
<div class="dashboard-header bg-gradient-primary-to-secondary py-5">
    <div class="container text-center text-white">
        <div class="avatar-container mb-3">
            <div class="avatar-circle bg-white text-primary">
                @studentName.Substring(0, 1).ToUpper()
            </div>
        </div>
        <h1 class="display-5 fw-bold mb-2">Welcome back, @studentName!</h1>
        <p class="lead opacity-75">Your personalized learning dashboard</p>
        <div class="d-flex justify-content-center gap-2 mt-3">
            <span class="badge bg-white text-primary">@totalCourses Courses</span>
            <span class="badge bg-white text-primary">@completedCourses Completed</span>
        </div>
    </div>
</div>

<!-- 🌟 Motivation Message with Animation -->
<div class="container mt-n4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            @if (completedCourses == totalCourses && totalCourses > 0)
            {
                <div class="alert alert-success alert-dismissible fade show shadow-sm border-0 text-center animate__animated animate__fadeInDown" role="alert">
                    <div class="d-flex align-items-center justify-content-center">
                        <i class="fas fa-trophy me-2"></i>
                        <strong>Congratulations!</strong> You've completed all your courses!
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            else if (completedCourses == 0)
            {
                <div class="alert alert-warning alert-dismissible fade show shadow-sm border-0 text-center animate__animated animate__fadeInDown" role="alert">
                    <div class="d-flex align-items-center justify-content-center">
                        <i class="fas fa-rocket me-2"></i>
                        <strong>Let's get started!</strong> Begin your learning journey today.
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            else
            {
                <div class="alert alert-info alert-dismissible fade show shadow-sm border-0 text-center animate__animated animate__fadeInDown" role="alert">
                    <div class="d-flex align-items-center justify-content-center">
                        <i class="fas fa-chart-line me-2"></i>
                        <strong>Great progress!</strong> You're @((completedCourses * 100) / totalCourses)% through your courses.
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
        </div>
    </div>
</div>

<!-- 📊 Summary Cards with Hover Effects -->
<div class="container mt-4">
    <div class="row g-3">
        <!-- Course Progress Card -->
        <div class="col-md-4">
            <div class="card summary-card h-100 border-0 shadow-sm hover-scale animate__animated animate__fadeInUp">
                <div class="card-body text-center p-4">
                    <div class="summary-icon bg-primary-light text-primary rounded-circle mx-auto mb-3">
                        <i class="fas fa-book-open"></i>
                    </div>
                    <h3 class="mb-1 fw-bold">@totalCourses</h3>
                    <h6 class="text-muted mb-2">Total Courses</h6>
                    <div class="progress thin-progress">
                        <div class="progress-bar bg-primary" role="progressbar"
                             style="width: @((totalCourses > 0) ? (completedCourses * 100)/totalCourses : 0)%"
                             aria-valuenow="@((totalCourses > 0) ? (completedCourses * 100)/totalCourses : 0)"
                             aria-valuemin="0"
                             aria-valuemax="100"></div>
                    </div>
                    <small class="text-muted">@completedCourses completed (@((totalCourses > 0) ? (completedCourses * 100) / totalCourses : 0)%)</small>
                </div>
            </div>
        </div>

        <!-- Time Watched Card -->
        <div class="col-md-4">
            <div class="card summary-card h-100 border-0 shadow-sm hover-scale animate__animated animate__fadeInUp animate__delay-1s">
                <div class="card-body text-center p-4">
                    <div class="summary-icon bg-success-light text-success rounded-circle mx-auto mb-3">
                        <i class="fas fa-clock"></i>
                    </div>
                    <h3 class="mb-1 fw-bold">@totalHours<small class="fs-6 text-muted">h</small> @remainingMinutes<small class="fs-6 text-muted">m</small></h3>
                    <h6 class="text-muted mb-3">Total Watch Time</h6>
                    <small class="text-muted">Across all courses</small>
                </div>
            </div>
        </div>

        <!-- Performance Card -->
        <div class="col-md-4">
            <div class="card summary-card h-100 border-0 shadow-sm hover-scale animate__animated animate__fadeInUp animate__delay-2s">
                <div class="card-body p-4">
                    <h6 class="text-muted mb-3">Overall Progress</h6>
                    <div class="chart-container" style="position: relative; height: 120px;">
                        <canvas id="overallProgressChart"></canvas>
                    </div>
                    <div class="d-flex justify-content-center mt-2">
                        <span class="badge bg-primary me-2">You: @completedCourses</span>
                        <span class="badge bg-secondary">Avg: @(totalCourses > 0 ? completedCourses / 2 : 0)</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 🏆 Top Courses with Carousel -->
<div class="container mt-5">
    <div class="card border-0 shadow-sm">
        <div class="card-header bg-white border-0 d-flex justify-content-between align-items-center">
            <h4 class="mb-0"><i class="fas fa-trophy text-warning me-2"></i>Top Performing Courses</h4>
            <a href="#" class="btn btn-sm btn-outline-primary">View All</a>
        </div>
        <div class="card-body">
            <div id="topCoursesCarousel" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    @foreach (var course in Model.Courses.OrderByDescending(c => c.Progress).Take(3))
                    {
                        var isActive = course == Model.Courses.OrderByDescending(c => c.Progress).First();
                        <div class="carousel-item @(isActive ? "active" : "")">
                            <div class="d-flex flex-column flex-md-row align-items-center">
                                <div class="flex-grow-1 me-md-4">
                                    <h5 class="mb-1">@course.Title</h5>
                                    <p class="text-muted mb-2">@course.WatchedVideosCount of @course.TotalVideos videos watched</p>
                                    <div class="progress mb-2" style="height: 8px;">
                                        <div class="progress-bar bg-success" role="progressbar"
                                             style="width: @course.Progress%"
                                             aria-valuenow="@course.Progress"
                                             aria-valuemin="0"
                                             aria-valuemax="100"></div>
                                    </div>
                                </div>
                                <div class="text-center text-md-end mt-3 mt-md-0">
                                    <div class="display-4 fw-bold text-success">@course.Progress%</div>
                                    <a href="#" class="btn btn-sm btn-success mt-2">Continue</a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#topCoursesCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#topCoursesCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 📚 Course Cards with Filter Options -->
<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h4 class="mb-0"><i class="fas fa-book text-secondary me-2"></i>Your Courses</h4>
        <div class="dropdown">
            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-filter me-1"></i>Filter
            </button>
            <ul class="dropdown-menu" aria-labelledby="filterDropdown">
                <li><a class="dropdown-item" href="#" data-filter="all">All Courses</a></li>
                <li><a class="dropdown-item" href="#" data-filter="completed">Completed</a></li>
                <li><a class="dropdown-item" href="#" data-filter="in-progress">In Progress</a></li>
            </ul>
        </div>
    </div>

    <div class="row g-4 course-container">
        @foreach (var course in Model.Courses)
        {
            var isCompleted = course.Progress == 100;
            var hours = course.TotalWatchedMinutes / 60;
            var minutes = course.TotalWatchedMinutes % 60;
            var courseClass = isCompleted ? "completed" : "in-progress";

            <div class="col-md-6 col-lg-4 course-item @courseClass">
                <div class="card course-card h-100 border-0 shadow-sm hover-shadow transition-all">
                    <div class="card-img-top bg-light" style="height: 120px; background: url('https://source.unsplash.com/random/600x400/?education,@course.Title.Replace(" ", "")') center/cover;"></div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h5 class="card-title mb-0">@course.Title</h5>
                            <span class="badge @(isCompleted ? "bg-success" : "bg-info")">@course.Progress%</span>
                        </div>
                        <p class="text-muted small mb-3">@course.WatchedVideosCount of @course.TotalVideos lessons</p>

                        <div class="progress mb-3" style="height: 6px;">
                            <div class="progress-bar @(isCompleted ? "bg-success" : "bg-info")"
                                 role="progressbar"
                                 style="width: @course.Progress%"
                                 aria-valuenow="@course.Progress"
                                 aria-valuemin="0"
                                 aria-valuemax="100"></div>
                        </div>

                        <div class="d-flex justify-content-between align-items-center">
                            <span class="small text-muted"><i class="far fa-clock me-1"></i> @hours h @minutes m</span>
                            <a href="#" class="btn btn-sm @(isCompleted ? "btn-outline-success" : "btn-primary")">
                                @(isCompleted ? "Review" : "Continue")
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (Model.Courses.Count == 0)
    {
        <div class="text-center py-5">
            <img src="https://cdn-icons-png.flaticon.com/512/4076/4076478.png" style="height: 100px; opacity: 0.5;" class="mb-3">
            <h5 class="text-muted">No courses enrolled yet</h5>
            <p class="text-muted">Start your learning journey by enrolling in courses</p>
            <a href="#" class="btn btn-primary mt-2">Browse Courses</a>
        </div>
    }
</div>

@section Styles {
    <style>
        /* Custom CSS for enhanced dashboard */
        .dashboard-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 0 0 20px 20px;
            margin-bottom: 30px;
        }

        .avatar-circle {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            font-weight: bold;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }

        .summary-card {
            transition: all 0.3s ease;
            border-radius: 10px;
        }

            .summary-card:hover {
                transform: translateY(-5px);
            }

        .summary-icon {
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .bg-primary-light {
            background-color: rgba(13, 110, 253, 0.1);
        }

        .bg-success-light {
            background-color: rgba(25, 135, 84, 0.1);
        }

        .thin-progress {
            height: 5px;
        }

        .course-card {
            transition: all 0.3s ease;
            border-radius: 10px;
            overflow: hidden;
        }

            .course-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
            }

        .timeline {
            position: relative;
            padding-left: 30px;
        }

        .timeline-item {
            position: relative;
            padding-bottom: 20px;
        }

        .timeline-icon {
            position: absolute;
            left: -40px;
            top: 0;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
        }

        .timeline-content {
            padding: 10px 15px;
            background: #f8f9fa;
            border-radius: 6px;
        }

        .hover-scale {
            transition: transform 0.3s ease;
        }

            .hover-scale:hover {
                transform: scale(1.03);
            }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .dashboard-header {
                border-radius: 0 0 15px 15px;
            }

            .avatar-circle {
                width: 60px;
                height: 60px;
                font-size: 1.5rem;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    <script>
        // Overall Progress Chart
        const ctxOverall = document.getElementById('overallProgressChart').getContext('2d');
        const overallChart = new Chart(ctxOverall, {
            type: 'doughnut',
            data: {
                labels: ['Completed', 'In Progress'],
                datasets: [{
                    data: [@completedCourses, @(totalCourses - completedCourses)],
                    backgroundColor: ['#28a745', '#17a2b8'],
                    borderWidth: 0,
                    hoverOffset: 10
                }]
            },
            options: {
                cutout: '75%',
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        enabled: true,
                        callbacks: {
                            label: function(context) {
                                return context.label + ': ' + context.raw + ' courses';
                            }
                        }
                    }
                },
                animation: {
                    animateScale: true,
                    animateRotate: true
                }
            }
        });

        // Course filtering functionality
        document.addEventListener('DOMContentLoaded', function() {
            const filterLinks = document.querySelectorAll('[data-filter]');

            filterLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const filter = this.getAttribute('data-filter');

                    document.querySelectorAll('.course-item').forEach(item => {
                        if (filter === 'all') {
                            item.style.display = 'block';
                        } else {
                            if (item.classList.contains(filter)) {
                                item.style.display = 'block';
                            } else {
                                item.style.display = 'none';
                            }
                        }
                    });

                    // Update active state on filter buttons
                    filterLinks.forEach(fl => fl.classList.remove('active'));
                    this.classList.add('active');
                });
            });
        });

        // Add animation to cards when they come into view
        const observerOptions = {
            threshold: 0.1
        };

        const observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate__animated', 'animate__fadeInUp');
                    observer.unobserve(entry.target);
                }
            });
        }, observerOptions);

        document.querySelectorAll('.course-card').forEach((card, index) => {
            observer.observe(card);
            // Staggered delay
            card.style.animationDelay = `${index * 0.1}s`;
        });
    </script>
}